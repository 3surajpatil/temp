
EMPLOYEE.JAVA
=======================================================
package test;

import java.util.Comparator;

public class Employee implements Comparable{

	int id ;
	String name;
	
	public Employee(int id,String name)
	{
		this.id=id;
		this.name=name;
	}
	
	public int getId() {
		return id;
	}
	public void setId(int id) {
		this.id = id;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	
	

	@Override
	public int compareTo(Object obj1) {
		
		Employee obj=(Employee)obj1;
		
		
		if(this.id>obj.id)
		{
			return -1;
		}
		else if(obj.id>this.id)
		{
			return 1;
		}
		else{
			return 0;
		}
		
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + id;
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Employee other = (Employee) obj;
		if (id != other.id)
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		return true;
	}

	@Override
	public String toString() {
		return "Employee [id=" + id + ", name=" + name + "]";
	}

}


=======================================================

Employee Comparator id comparing implementation.

package test;

import java.util.Comparator;

public class EmployeeComparator implements Comparator{

	@Override
	public int compare(Object obj1, Object obj2) {
	
		Employee e1=(Employee)obj1;
		Employee e2=(Employee)obj2;
		
		return e1.id -e2.id;

	}
		
}


==========================================================
EmployeeSorting example..

package test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class EmployeeSorting {

	public static void main(String[] args) {
	List<Employee> employeeList=new ArrayList<Employee>();
	
	
	Employee e1=new Employee(5,"suraj");
	Employee e2=new Employee(8,"vasim");
	Employee e3=new Employee(3,"supath");
	
	employeeList.add(e1);   // 
	employeeList.add(e2);   // 4 - 2 = 2
	employeeList.add(e3);   // 2 -1 = 1
	
	//Collections.sort(employeeList); // uses comparable interface.
	Collections.sort(employeeList,new EmployeeComparator()); // uses comparator interface.
	for(Employee e:employeeList)
	{
		System.out.println(e.id);
	}
	
	
	if(employeeList instanceof Employee)
	{
		System.out.println("true///!");
	}
	
	
}

}





1) what is differnce between restful and restless

---> Anything which not follows REST is restless. i.e. we can say SOAP is also a restless.
---> users will have to create seperate url for each operation like delete, update. while they are making a get/post type request always.

2) What is difference bwtween Controller and RestController

---> https://javarevisited.blogspot.com/2017/08/difference-between-restcontroller-and-controller-annotations-spring-mvc-rest.html 


3) What is try with resources ?

---> The try-with-resources statement is a try statement that declares one or more resources. 
A resource is an object that must be closed after the program is finished with it.
---> One of the Java 7 feature is try-with-resources.
---> before try with resource we used to close resources in finally block.
---> if we forgot to close opened resources then those used to consume memory, which led to memory consumption.
---> syntax
	try(BufferedReader br=new BufferedReader(file){
		...use br here.
	}
	catch(Exception e)
	{
	...
	}
---> in above example we don't need to close 'br' object. it will get closed automatically when execution comes out of try.
---> we need to open resources like File / connection etc. 




