------------------------------- frequent commands.
# to freeup disc space / cache used by docker.
> docker system prune


cd /home/workload/git/spring-boot-apps/springbootmysql/

mvn package -DskipTests=true

docker rmi -f local:springboot-mysql

docker build -t local:springboot-mysql .
docker build . -t flask-app2

#this will run  docker iamge on local network so that local mysql will be accesible to spring boot application.
docker run -it  --network host bb7fe66b131b

#to run in detached mode
#docker run -d --network host --restart unless-stopped bb7fe66b131b    // need to change image id every time

#name=suraj-sb-mysql is container name
docker run -d --network host --name suraj-sb-mysql --restart unless-stopped local:springboot-mysql

docker container ls
docker container ls -a   # shows stopped containers also.

docker stop 223eebd30322(container id)

#to remove docker container
docker rm --force redis

#to remove all stopped containers
docker container prune

#here name=suraj-sb-mysql is container name
sh 'docker ps -f name=suraj-sb-mysql -q | xargs --no-run-if-empty docker container stop'
sh 'docker container ls -a -f name=suraj-sb-mysql -q | xargs -r docker container rm'




#rename a docker container
docker rename naughty_volhard suraj-sb-mysql


#list docker containers
docker ps   // same as docker container ls

#both result same
docker ps -a -f name=suraj-sb-mysql -q 
docker container ls -a -f name=suraj-sb-mysql -q 



#to enter to running container
docker exec -it <container_name> bash

docker exec -it e7b7693e011c bash

************************Docker Run vs Docker Exec *****************************************
This is a fairly common question – but has a simple answer! 
In short, docker run is the command you use to create a new container from an image, 
whilst docker exec lets you run commands on an already running container!



-----------------------------#build docker image

docker build -t image-registry-name:image-tag-name .

docker build -t local:springboot-mysql .

docker build --no-cache


--------------------------------# to remove docker image

docker rmi -f c24de832ed9c

--------------------------------# to run a docker image

docker run -it <iamge_id>

# specify network 

docker run -it <image_id> --network host     			# other --network option is 'bridge'

--------------------------------# docker networking 

docker network ls

sudo docker network inspect host



docker inspect <container−id>

docker network inspect host





Questions
-----------

Beginner Level:
----------------------
Q) What is Docker and how does it work?
Q) Explain the difference between a Docker image and a Docker container.
Q) What is a Dockerfile and what is its purpose?
Q) What are the key components of Docker architecture?
Q) How does Docker differ from a virtual machine?
Q) What are Docker volumes and why are they used?
Q) Explain Docker Hub and its role.
Q) Basic Docker commands: docker run, docker ps, docker stop, docker rm, docker build, docker pull, docker push.

Intermediate Level:
----------------------

Q) What is Docker Compose and how is it used for multi-container applications?
Q) Explain Docker networking concepts (bridge, host, overlay networks).
Q) What are Docker namespaces and cgroups, and how do they provide isolation?
Q) Describe the lifecycle of a Docker container.
Q) Explain multi-stage Docker builds.
Q) How do you manage data persistence in Docker?
Q) What is the difference between COPY and ADD in a Dockerfile? 
 
Advanced Level:
----------------------
Q) Explain Docker Swarm and its features (e.g., Routing Mesh, high availability).
Q) How does Docker ensure image immutability?
Q) Discuss Docker security best practices.
Q) How would you set up a CI/CD pipeline with Docker? 
Q) Explain the concept of "Docker in Docker" (DinD) and its use cases. 
Q) How do you monitor Docker containers in a production environment? 
Q) What are Docker secrets and how are they used for sensitive data?
Q) Scenario-based questions: e.g., "How would you troubleshoot a Docker container failing to start?" or "How would you scale a multi-service application using Docker?"

Additional Considerations:
-----------------------
Docker and Kubernetes: Questions about the relationship between Docker and Kubernetes, their differences, and when to use each.
Cloud Integration: How Docker integrates with various cloud platforms.
Real-world experience: Be prepared to discuss your experience using Docker in projects and how you've solved challenges.