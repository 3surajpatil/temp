Java 8 Lambda Expressions
=============================

Reference :- http://www.java2novice.com/java-8/lambda-expression/

---> Lambda expression is an anonymous function without any declarations.

---> A lambda expression is an instance of a functional interface

---> Syntax :- (arguments) -> {body}

--> here arguments can be of any type simmiler as we pass to any method. 
e.g. 1) (i)-> {System.out.println(i);}
e.g. 2) (int i) {System.out.println(i);}
e.g. 3) ()-> {System.out.println("NoArgs");}
e.g. 4)	(int i,int j)-> {System.out.println("sum:- "+i+j);}
e.g. 5) i-> {System.out.println(i);}

--> body can contain any number of statements.

e.g. 1) (int i, int j) ->  return i+j
e.g. 2) (int i, int j) -> {
            int i = i+j;
            System.out.println(i);
		}

--> in body if you don't specify return type , void will be default return type.

Q) What is Functional Interface ?

---> An interface with only one abstract method is called functional interface
in Java 8, you can define functional interfaces with @FunctionalInterface annotation to notify java compiler.
Marker Interface is one which is having no/zero abstract method in it . 

--> Java API has many single method implementations (i.e. functional interfaces ) like Comparator, Runnable, Callable,Consumer (argument of forEach() method.) etc. 
    Prior to Java-8, you can implement and initiaize them using anynomus class syntax.
	
-->	Example usage of lambda Expression for Comparator.


Person.java
------------
package test;
public class Person {

	int id;
	String name;
	//Convinience constructor.	
	public Person(int id, String name) {
		super();
		this.id = id;
		this.name = name;
	}
	//default constructor.
	public Person() {
		// TODO Auto-generated constructor stub
	}

	@Override
	public String toString() {
		return "Person [id=" + id + ", name=" + name + "]";
	}
	//getters and setters.	
}

	
package test;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

public class TestClass {

	public static void main(String[] args) {
	
			Person p=new Person(1,"suraj");
			Person p2=new Person(3,"Pankaj");
			Person p1=new Person (2,"Chetan");
			List<Person> l=new ArrayList();
			l.add(p); l.add(p2); l.add(p1);						
			System.out.println(l.toString());
			
			//Lambda expression used here.	
			Comparator employeeIdComparator=(Object obj1,Object obj2)->{
				
				Person firstPerson=(Person)obj1;
				Person secondPerson=(Person)obj2;
				
				if(firstPerson.getId()>secondPerson.getId()) {
					return 1;
				}
				else if(firstPerson.getId()<secondPerson.getId()) {
					return -1;
				}
				else {
					return 0;
				}																								
			};					
			Collections.sort(l, employeeIdComparator);			
			System.out.println(l.toString());			
	}
}
Output :- 
==========
[Person [id=1, name=suraj], Person [id=3, name=Pankaj], Person [id=2, name=Chetan]]
[Person [id=1, name=suraj], Person [id=2, name=Chetan], Person [id=3, name=Pankaj]]



Method References
==================
---> insted of writing a lambda expression and call a method, we can use Method reference.
---> this is short hand way of writing lambda expression.
---> it is implicit way of lambda expression. compiler will write lambda expression for us when we use method reference.

What is need of method reference ? :- this is short hand way of writing lambda expression.

There are three types of Method Reference 

---> 1) Static method reference.
---> 2) instance method reference.
---> 3) constructor method reference. 


---> Operator used for method reference :: (method reference operator) 

---> Consider below Example. 
in same example we can observe instance method reference by making printMessage() method of HelloMessagePrinter class  as instance.
and uncommenting the code with comment  instance method reference
--> thing to note here is we can do same thing with help of lambda expression.



@FunctionalInterface
interface MessagePrinter {		
	void printMessage();
}

class HelloMessagePrinter {

	public static void printMessage(){
		System.out.println("Hello World...!");
	}
	
}

public class Executor {
	
	public static void main(String[] args) {		

		//static method reference.
		MessagePrinter mp= HelloMessagePrinter::printMessage;
		mp.printMessage();
		
		
		// instance method reference
		/*HelloMessagePrinter hmp=new HelloMessagePrinter();
		MessagePrinter mp= hmp::printMessage;
		mp.printMessage();*/
						
	}

}

---> Constructor method reference



Default Methods
================

--> With default methods you can include method body within the interface.
--> with 'default' keyword we can declare default methods in a interface.

public interface DemoInterface {
 
    default void greetingsMessage(){
        System.out.println("Welcome...");
    }
}

--> with default methods if our class is not implementing the method then default method will be called. so no need of making our class as abstract.
--> once overridden the method by the implementation class then we don't need to mention the method as default.

-->Why do we need to implement a method within the interface?

Let's say you have an interface which has multiple methods, and multiple classes are implementing this interface.
One of the method implementation can be common across the class, we can make that method as a default method, 
so that the implementation is common for all classes.

Second scenario where you have already existing application, for a new requirements we have to add a method to the existing interface. 
If we add new method then we need to implement it through out the implementation classes. 
By using the Java 8 default method we can add a default implementation of that method which resolves the problem.

---> java was not having multiple inheritance. due to which there could be ambiguity of calling the method with same name which is present in 
two classes.
--> simmilerly with default methods in two interfaces with same name and different or same body, there could be ambiguity while invoking the method
hence that default methods from two different interfaces become abstract for the implementation class. we have to implement that abstract method in our
implementation class.


--> simmilerly if two interfaces are having same default method. and one is extending from other. then default method in second interface would be overridden.
--> we can call default method of interface explicitly from our implementation class as :- InterfaceName.super.method();
--> default methods made API's backword compatible.
--> there can be n number of default methods in the interface.
--> one example of default method is ForEach() method provided in Iterable interface. this method is used to iterate over collection framework.


ForEach() method
=================

--> this method is provided to iterate over collection framework.
--> It is defined in Iterable and Stream interface.
--> Collection classes that uses Iterable interface have ForEach method.
--> Example

public class TestClass {

	public static void main(String[] args) {	
		Map<String,String> vehicleCompany=new HashMap<String,String>();		
		vehicleCompany.put("Tata", "Harrier");
		vehicleCompany.put("BMW", "X1");
		vehicleCompany.put("Mahindra", "XUV500");	
		TestClass.iterate(vehicleCompany);
	}

	private static void iterate(Map vehicleCompany) {		
		vehicleCompany.forEach((k,v)->{System.out.println("key:-"+k+" value:-"+v );});		
	}


--> this default method heading in Map interface looks like :- default void forEach(BiConsumer<? super K, ? super V> action) {....}
--> here BiConsumer is a funtional interface Represents an operation that accepts two input arguments and returns no result.
--> BiConsumer is specialized form of Consumer(I).

--> Example for iterating a List would be 

public class TestClass {

	public static void main(String[] args) {										
		List <String> vehicleList=new ArrayList<String>();
		vehicleList.add("Harrier");
		vehicleList.add("X1");
		vehicleList.add("XUV500");
		
		TestClass.iterate(vehicleList);
	}

	private static void iterate(List l) {		
		l.forEach(item->{System.out.println(item);});		
	}	
}

--> ForEach default method heading in List interface looks like :- default void forEach(Consumer<? super T> action) {
--> Here Consumer is functional interface. it represents an operation that accepts a single input argument and returns no result.

--> ForEach has it's own default method implementation for 1-D(List) & 2-D(Map) interfaces.
--> major difference beteween iterating using for loop in earlier java versions is we were using external loop . 
    and from java 1.8 onwards that loop is provided 
	internally.  so we can use that loop insted of writing our own loop.


Streams in java8 (java.util.stream.Stream)
============================================

--> Streams are wrappers for collections and arrays
--> Streams are just like pipeline of information. so they don't need storage. 
--> they can work on existing datasource as collection or array without modifying it.
--> The elements of a stream are only visited once during the life of a stream. 
	Like an Iterator, a new stream must be generated to revisit the same elements of the source. 
--> How to create a stream ?

1) Using Stream.of(-)

		// create Stream using Stream.of(comma seperated values)
        Stream<Integer> intStream = Stream.of(1,2,3,4,5);
        intStream.forEach(System.out::println);
	
		or
        
        // create stream using array of elements
        Stream<Integer> intStream1 = Stream.of(new Integer[]{1,2,3,4,5});
        intStream1.forEach(System.out::println);	

2) By using stream() method on  Collection object.

		List<String> vehicles = Arrays.asList("bus", "car", "bicycle", "flight", "train");
        Stream<String> vStream = vehicles.stream();

3) by using Stream.generate(-)

	Stream<UUID> uuidStream = Stream.generate(UUID::randomUUID);


	Methods of Stream 
	------------------
	
	1) filter(-) :- this will create a filtered stream of given pridicate.
	empList.stream().filter(emp->emp.getSalary() > 10000).forEach(System.out::println);
	
	2) map(-) :- this will return a stream after applying the provided predicate.
	
	List<String> vehicles = Arrays.asList("bus", "car", "bicycle", "flight", "train");
	vehicles.stream().map(String::toUpperCase).forEach(System.out::println);

	3)sorted(-) :- this will return stream of sorted collection elements. we need to provide lambda for Comparator or Comparable.
				if elements are not Comparable then we can get ClassCastException.
	empList.stream()
                .sorted((emp1, emp2)->emp1.getSalary().compareTo(emp2.getSalary()))
                .forEach(System.out::println);

	4)limit(number) :- this will limit the elements while creating stream and create a stream of provided number.
	Stream.of("bus", "car", "bicycle", "flight", "train").limit(3).forEach(System.out::println);

	
Date and Time API  (java.time package)
-------------------

--> we have following classes for date and time introduced in java 1.8.
-->
1) LocalDateTime :- This will query the system clock in the defaulttime-zone to obtain the current date-time. 

Static Methods 

i) now()   
ii)of(year, month, dayOfMonth, hour, minute)

Example :- 

		LocalDateTime ldt=LocalDateTime.now();
		or 
		LocalDateTime ldt=LocalDateTime.of(2019, Month.JANUARY, 16, 13, 13);
				
		System.out.println(ldt.minusDays(20)); // substracts given long number of days and returns date.
 		System.out.println(ldt.plusDays(28));	// adds long number of days and returns date.	
		System.out.println(ldt.toString());
		System.out.println(ldt.getDayOfMonth());
		System.out.println(ldt.getDayOfYear());
		System.out.println(ldt.getYear());
		System.out.println(ldt.getMonth());
		System.out.println(ldt.getHour());
		System.out.println(ldt.getMinute());
		System.out.println(ldt.getSecond());
		System.out.println(ldt.getNano());
		System.out.println(ldt.toLocalDate()); //2019-01-16  :- returns LocalDate object
		System.out.println(ldt.toLocalTime()); //13:25:02.011 :- returns LocalTime object

2) ZonedDateTime :- this will contain zone offset along with date.

		ZonedDateTime zdt=ZonedDateTime.now();		
		System.out.println(zdt.toString());	 //output :- 2019-01-16T13:26:41.283+05:30[Asia/Calcutta]

		
		ZoneId zid=ZoneId.systemDefault();
		ZonedDateTime.of(LocalDateTime.now(), zid);		
		System.out.println(zdt.toString());
		
				
3) LocalDate :-  	LocalDate currentDate=LocalDate.now(); //2019-01-16
4) LocalTime :- LocalTime currentTime=LocalTime.now();  //15:01:30.820
5) Instant :- introduced Instant class to represent machine readable time formats.

		Instant stringToInstant= Instant.parse("2019-01-16T14:44:35Z"); // observe the string format is with 'T' & 'Z' in it.
        System.out.println(stringToInstant.toString());
		
6) Period :- 

		Period.of(years, months, days);
		Period.ofDays(days);
		Period.ofMonths(months);
		Period.ofWeeks(weeks);
		Period.ofYears(years);
		
		//to calculate difference between dates.
		LocalDate currentDate=LocalDate.now();
		System.out.println(currentDate);

		LocalDate tenDaysBefore=currentDate.minus(Period.ofDays(10)); // 10 days before date
		LocalDate twoMonthsAfter=currentDate.plus(Period.ofMonths(2)); // two months after.
		
		Period deffrencBetweenDates=Period.between(tenDaysBefore, twoMonthsAfter);
		System.out.println("Years :- "+deffrencBetweenDates.getYears()+" Months:- "+deffrencBetweenDates.getMonths()+" Days:- "+deffrencBetweenDates.getDays());
		

7) Duration :- As we can calculate difference of dates with help of Period, we can calculate diffrence of time with help of Duration.

		LocalTime currentTime=LocalTime.now();
		
		LocalTime after2_HoursAnd30_MinutesAnd15_Seconds=currentTime.plus(Duration.ofHours(2)).plus(Duration.ofMinutes(30)).plusSeconds(15);
		System.out.println(after2_HoursAnd30_MinutesAnd15_Seconds.toString()); //17:47:47.367
		



Q) calculating difference between execution in seconds and miliseconds.
		
		Long beforeStartingExecution=Instant.now().getEpochSecond();
		//calling business logic method.
		someBusinessLogic();		
		Long afterExecutionFinished=Instant.now().getEpochSecond();		
		Long difference= afterExecutionFinished-beforeStartingExecution;		
		System.out.println("executionTime in seconds :- "+difference);
		
		Long beforeStart=Instant.now().toEpochMilli();
		someBusinessLogic();
		Long afterComplete=Instant.now().toEpochMilli();
		Long diff=afterComplete-beforeStart;
		System.out.println("executionTime in miliSeconds :- "+diff);

		public static void someBusinessLogic(){
		
		try {
			TimeUnit.SECONDS.sleep(3);
		} catch (InterruptedException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	

Q)Converting string to date ?

		// means string date is in "yyyy-mm-dd" format
        String dateStr = "2015-11-18";
        LocalDate dtObj = LocalDate.parse(dateStr);
        System.out.println("Date object: "+dtObj);
 
        // convert it using formatter
        DateTimeFormatter dateFormatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        LocalDate fdtObj = LocalDate.parse("18/11/2015", dateFormatter);
        System.out.println("Date object: "+fdtObj);







	
